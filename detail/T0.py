# Here are the expressions used to calculate the tree-level trispectrum
# These (horrible) expressions are copy-pasted from a mathematica notebook,
# which shows their derivation and will be uploaded soon

import numpy as np

def InitParameters(arr):
    global b1,be,g2,b2,g3,g2x,g21,b3
    [b1,be,g2,b2,g3,g2x,g21,b3]=arr

def e24o44(u12,k1,k2):
    if(l1==0 and l2==0):
        return((15 + 10*be + 3*be**2)/15.)
    elif(l1==0 and l2==2):
        return((2*be*(7 + 3*be)*(2*k2**2 + 4*k1*k2*u12 + k1**2*(-1 + 3*u12**2)))/(21.*(k1**2 + k2**2 + 2*k1*k2*u12)))
    elif(l1==2 and l2==2):
        return((5*((21 + be*(22 + 9*be))*k1**4*(-1 + 3*u12**2) + 
           (21 + be*(22 + 9*be))*k2**4*(-1 + 3*u12**2) + 
           4*k1**3*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
           4*k1*k2**3*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
           2*k1**2*k2**2*(-21 - 22*be - 3*be**2 + (21 + be*(46 + 21*be))*u12**2 + 
              18*(7 + 2*be*(3 + be))*u12**4)))/(42.*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

# First Z1 Z1 Z2 shot noise term in Eq. 91
def e34o44_1(k1,k2):
    if(l1==0 and l2==0):
        if(k1!=k2):
            return((be/3. + (19*be**2)/45. + be**3/5. + be**4/25. + 
                (25*b2*(3 + be)**2 - 4*(5 + be)*(15 + 7*be)*g2)/(450.*b1**2) + 
                (180*be**2*(7 + 3*be)*k1**9*k2 - 480*be**2*(7 + 3*be)*k1**7*k2**3 + 
                8*(35700 + be*(32900 + 3*be*(4627 + 831*be)))*k1**5*k2**5 - 
                480*be**2*(7 + 3*be)*k1**3*k2**7 + 180*be**2*(7 + 3*be)*k1*k2**9 + 
                45*be**2*(7 + 3*be)*(k1**2 - k2**2)**4*(k1**2 + k2**2)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/
                (352800.*b1*k1**5*k2**5)))
        else:
            return((175*b2*(3 + be)**2 + 14*b1**2*be*(5 + 3*be)*(15 + be*(10 + 3*be)) + 
                2*b1*(1275 + be*(1175 + 9*be*(53 + 9*be))) - 28*(5 + be)*(15 + 7*be)*g2)/(3150.*b1**2))
    if(l1==0 and l2==2):
        if(k1!=k2):
            return((be*(4*k1*k2*(45*b1*be**2*k1**10 + 15*b1*(63 + 4*be*(15 + be))*k1**8*k2**2 - 
                  3*b1*(1155 + be*(1070 + 157*be))*k1**6*k2**4 + 
                  (3920*b2*(3 + be) + b1*(31031 + 3*be*(7558 + 1751*be)) + 
                     112*b1**2*(105 + be*(230 + 9*be*(17 + 4*be))) - 1792*(7 + 2*be)*g2)*k1**4*k2**6 + 
                  15*b1*(63 + 2*(19 - 9*be)*be)*k1**2*k2**8 + 45*b1*be*(2 + 3*be)*k2**10) + 
               45*b1*(k1 - k2)**4*(k1 + k2)**4*
                (be**2*k1**4 + (21 + 5*be*(4 + be))*k1**2*k2**2 + be*(2 + 3*be)*k2**4)*
                (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(141120.*b1**2*k1**5*k2**7))
        else:
            return((be*(245*b2*(3 + be) + b1*(1841 + 9*be*(146 + 33*be)) + 
               7*b1**2*(105 + be*(230 + 9*be*(17 + 4*be))) - 112*(7 + 2*be)*g2))/(2205.*b1**2))
    if(l1==2 and l2==2):
        if(k1!=k2):
            return((4*k1*k2*(315*b1*be**2*(33 + 19*be)*k1**12 - 
                210*b1*be*(-99 + be*(-33 + 16*be))*k1**10*k2**2 - 
                21*b1*be*(2640 + 7*be*(473 + 139*be))*k1**8*k2**4 + 
                4*(4928*b1**2*be**2*(7 + 3*be)*(7 + 6*be) + 
                   b1*(51744 + be*(140525 + 3*be*(102685 + 34648*be))) + 
                   1232*(49*b2*be**2 - (-7 + be)*(21 + 25*be)*g2))*k1**6*k2**6 - 
                21*b1*be*(2640 + 7*be*(473 + 139*be))*k1**4*k2**8 - 
                210*b1*be*(-99 + be*(-33 + 16*be))*k1**2*k2**10 + 315*b1*be**2*(33 + 19*be)*k2**12) + 
             315*b1*be*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2)*
              (be*(33 + 19*be)*k1**4 + 2*(33 + 5*be*(11 + 4*be))*k1**2*k2**2 + be*(33 + 19*be)*k2**4)*
              (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(4.346496e6*b1**2*k1**7*k2**7))
        else:
            return((686*b2*be**2 + 56*b1**2*be**2*(7 + 3*be)*(7 + 6*be) + 
             4*b1*(147 + be*(350 + 9*be*(89 + 30*be))) - 14*(-7 + be)*(21 + 25*be)*g2)/(3087.*b1**2))

# Second Z1 Z1 Z2 shot noise term in Eq. 91
def e34o44_2(u12,k1,k2):

    if(l1==0 and l2==0):
        return((147*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)*
          ((15 + be*(10 + 3*be))*k1**2 + 2*(15 + be*(10 + 3*be))*k1*k2*u12 + 
            k2**2*(15 + be*(10 + be + 2*be*u12**2))) - 
         k2**2*(7*b1**2*be*(k2**3*u12*(3*(1 + be)*(35 + be*(28 + 5*be)) + 
                  4*be**2*(9 + 5*be)*u12**2) + 
               3*k1**2*k2*u12*(-35 + 49*be + 51*be**2 + 15*be**3 + 
                  4*(35 + be*(35 + be*(21 + 5*be)))*u12**2) + 
               k1**3*(-105 - 21*be + 9*be**2 + 5*be**3 + 
                  6*(35 + be*(35 + be*(21 + 5*be)))*u12**2) + 
               3*k1*k2**2*(-35 - 7*be + 15*be**2 + 3*be**3 + 
                  4*(35 + be*(49 + 6*be*(4 + be)))*u12**2 + 8*be**2*(3 + be)*u12**4)) - 
            294*g2*k1*(-1 + u12**2)*((15 + be*(10 + 3*be))*k1**2 + 
               2*(15 + be*(10 + 3*be))*k1*k2*u12 + k2**2*(15 + be*(10 + be + 2*be*u12**2))) + 
            3*b1*(k1**3*(-315 - 175*be - 49*be**2 + 3*be**3 + 
                  2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) + 
               k1**2*k2*u12*(105 + 385*be + 175*be**2 + 39*be**3 + 
                  4*(525 + be*(455 + be*(245 + 51*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) + 
               k1*k2**2*(315*(-1 + 8*u12**2) + 
                  be*(-175 + 7*be + 3*be**2 + 4*(595 + be*(224 + 39*be))*u12**2 + 
                     12*be*(35 + 13*be)*u12**4)) + 
               7*k2**3*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2))))))/
       (4410.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==0 and l2==2):
        return((231*b2*be*k1*(k1**2 + k2**2 + 2*k1*k2*u12)*
          (2*(7 + 3*be)*k1**2*(-1 + 3*u12**2) + 2*(7 + 3*be)*k1*k2*u12*(1 + 3*u12**2) + 
            k2**2*(7 + be + (21 + 11*be)*u12**2)) - 
         be*k2**2*(-462*g2*k1*(-1 + u12**2)*
             (2*(7 + 3*be)*k1**2*(-1 + 3*u12**2) + 2*(7 + 3*be)*k1*k2*u12*(1 + 3*u12**2) + 
               k2**2*(7 + be + (21 + 11*be)*u12**2)) + 
            7*b1**2*(k2**3*u12*(462 + 3*be*(297 + be*(176 + 25*be)) + 
                  be*(297 + be*(462 + 205*be))*u12**2) + 
               6*k1**2*k2*u12*(-77 - 11*be + 33*be**2 + 15*be**3 + 
                  (308 + be*(407 + 5*be*(66 + 19*be)))*u12**2 + 6*be*(33 + be*(22 + 5*be))*u12**4)\
                + k1**3*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 
                  36*be*(33 + be*(22 + 5*be))*u12**4) + 
               6*k1*k2**2*(-77 - 55*be + 11*be**2 + 3*be**3 + 
                  (308 + be*(451 + 3*be*(88 + 23*be)))*u12**2 + 2*be*(99 + 2*be*(55 + 17*be))*u12**4
                  )) + 33*b1*(7*k2**3*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
               2*k1**2*k2*u12*(-7 - 10*be + 3*be**2 + 2*(119 + be*(116 + 23*be))*u12**2 + 
                  2*(105 + 78*be + 28*be**2)*u12**4) + 
               k1*k2**2*(-7 + 10*be + be**2 + (385 + be*(290 + 57*be))*u12**2 + 
                  8*(63 + 19*be*(3 + be))*u12**4) + 
               2*k1**3*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 + 
                  2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6))))/
       (9702.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((15015*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)*
          ((21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2) + 
            2*k1*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
            k2**2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))) - 
         5*k2**2*(7*b1**2*be*(k2**3*u12*(-3*(715 + be*(1287 + be*(533 + 25*be))) + 
                  (11583 + be*(27027 + be*(16809 + 2885*be)))*u12**2 + 120*be**2*(39 + 25*be)*u12**4)
                 + 3*k1**2*k2*u12*(2431 - be*(1001 + be*(923 + 75*be)) - 8437*u12**2 + 
                  be*(5291 + 5*be*(1729 + 577*be))*u12**2 + 
                  12*(1287 + be*(1573 + 2*be*(507 + 125*be)))*u12**4) + 
               3*k1*k2**2*(1573 + 1001*be - 325*be**2 - 33*be**3 + 
                  (-7579 + be*(-5291 + 3*be*(793 + 257*be)))*u12**2 + 
                  4*(3861 + be*(6864 + be*(3679 + 998*be)))*u12**4 + 120*be**2*(26 + 9*be)*u12**6) + 
               k1**3*(be*(429 - 5*be*(39 + 29*be)) + 3*be*(-2717 + be*(-403 + 245*be))*u12**2 + 
                  18*(1287 + be*(1716 + be*(1183 + 290*be)))*u12**4 + 429*(11 - 43*u12**2))) - 
            6006*g2*k1*(-1 + u12**2)*((21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2) + 
               2*k1*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
               k2**2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))) + 
            39*b1*(k1**3*(693 + 605*be + 275*be**2 - 5*be**3 + 
                  (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 + 
                  2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6) + 
               k1*k2**2*(693 + 605*be - 77*be**2 - 5*be**3 - 
                  11*(693 + be*(829 + be*(155 + 3*be)))*u12**2 + 
                  8*(2079 + be*(2970 + be*(1287 + 244*be)))*u12**4 + 72*be**2*(55 + 23*be)*u12**6) + 
               k1**2*k2*u12*(-(be*(1727 + be*(737 + 41*be))) + 
                  be*(-583 + be*(1199 + 463*be))*u12**2 + 
                  4*(3465 + be*(4389 + be*(2607 + 607*be)))*u12**4 + 144*be**2*(11 + 5*be)*u12**6 - 
                  231*(1 + 17*u12**2)) + 7*k2**3*u12*
                (231*(-1 + 3*u12**2) + be*
                   (363*(-1 + 3*u12**2) + 
                     be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4))))))/
       (252252.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

# First Z1^2 Z2^2 term in Eq. 25
def e44o44_1(u12,k1,k2):

    if(l1==0 and l2==0):
        return((147147*b2**2*(15 + be*(10 + 3*be)) + 
         (2002*b2*k2**2*(294*(15 + be*(10 + 3*be))*g2*k1*(-1 + u12**2) + 
              7*b1**2*be*((105 + be*(21 - be*(9 + 5*be)))*k1 - 
                 3*(1 + be)*(35 + be*(28 + 5*be))*k2*u12 - 
                 6*(35 + be*(35 + be*(21 + 5*be)))*k1*u12**2 - 4*be**2*(9 + 5*be)*k2*u12**3) + 
              3*b1*(k1*(315 + 175*be + 49*be**2 - 3*be**3 - 
                    2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 - 24*be**2*(7 + 3*be)*u12**4) + 
                 7*k2*u12*(-105 + be*(-105 - be*(35 + 3*be + 4*(7 + 3*be)*u12**2))))))/
          (k1*(k1**2 + k2**2 + 2*k1*k2*u12)) + 
         (k2**4*(588588*(15 + be*(10 + 3*be))*g2**2*k1**2*(-1 + u12**2)**2 + 
              49*b1**4*be**2*(k1**2*(9009 - 858*be**2 + 105*be**4 + 
                    4*(-6006 + be*(-1287 + be*(1144 + 105*be*(13 + 4*be))))*u12**2 + 
                    8*(3003 + be*(3861 + be*(3289 + 105*be*(13 + 2*be))))*u12**4) + 
                 2*k1*k2*u12*(3003*(-1 + 4*u12**2) + 2574*be*(-1 + 11*u12**2) + 
                    910*be**3*(3 + 11*u12**2 + 4*u12**4) + 105*be**4*(5 + 20*u12**2 + 8*u12**4) + 
                    286*be**2*(11 + 78*u12**2 + 16*u12**4)) + 
                 k2**2*(3003*(1 + 2*u12**2) + 5148*be*(1 + 4*u12**2) + 
                    780*be**3*(1 + 12*u12**2 + 8*u12**4) + 286*be**2*(11 + 78*u12**2 + 16*u12**4) + 
                    15*be**4*(5 + 90*u12**2 + 120*u12**4 + 16*u12**6))) + 
              182*b1**3*be*(k1**2*(3465 + 3*be**2*(-132 + be*(-44 + 5*be)) + 
                    2*(-9240 + be*(-6006 + be*(-1485 + be*(176 + 135*be))))*u12**2 + 
                    12*(1925 + be*(2618 + be*(1617 + 4*be*(154 + 25*be))))*u12**4 + 
                    144*be**2*(33 + be*(22 + 5*be))*u12**6) + 
                 7*k2**2*u12**2*(1155 + be*
                     (2772 + 3*be*(726 + 5*be*(44 + 5*be)) + 8*be*(99 + 5*be*(22 + 5*be))*u12**2 + 
                       40*be**3*u12**4)) + 
                 2*k1*k2*u12*(1155*(-5 + 12*u12**2) + 462*be*(-13 + 55*u12**2) + 
                    308*be**3*(1 + 18*u12**2 + 16*u12**4) + 99*be**2*(-11 + 161*u12**2 + 60*u12**4) + 
                    5*be**4*(18 + 191*u12**2 + 208*u12**4 + 24*u12**6))) + 
              143*b1**2*(14*k1*k2*u12*(-945 + 
                    3*be*(-280 - 70*be + be**3 + 14*(1 + be)*(35 + be*(28 + 5*be))*g2) + 
                    14*(225 + 3*be*(90 + be*(36 + be*(6 + be))) + 
                       be*(-105 + be*(-189 + be*(-63 + 5*be)))*g2)*u12**2 - 
                    8*be**2*(-168 + 63*be*(-2 + g2) + be**2*(-19 + 35*g2))*u12**4 + 48*be**4*u12**6)\
                  + 49*k2**2*u12**2*(315 + 
                    be*(420 + 3*be*(70 + be*(12 + be)) + 24*be*(7 + be*(6 + be))*u12**2 + 
                       8*be**3*u12**4)) + 
                 k1**2*(315*(3 - 10*u12**2)**2 - 
                    420*be*(-3 + 49*g2 + (34 - 147*g2)*u12**2 + 2*(-40 + 49*g2)*u12**4) - 
                    42*be**2*(-9 + 98*g2 + 2*(50 - 539*g2)*u12**2 + 4*(-73 + 245*g2)*u12**4 - 
                       240*u12**6) - 36*be**3*
                     (1 - 49*g2 + (2 - 637*g2)*u12**2 + 14*(-4 + 49*g2)*u12**4 - 192*u12**6) + 
                    be**4*(1 + 6*u12**2)*(3 + 980*g2 + 14*(3 - 70*g2)*u12**2 + 152*u12**4 + 48*u12**6)))\
               - 12012*b1*g2*k1*(-1 + u12**2)*
               (k1*(-315 - 175*be - 49*be**2 + 3*be**3 + 
                    2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) + 
                 7*k2*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2))))))/
          (k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))/(8.82882e6*b1**4))
          
    if(l1==0 and l2==2):
        return((be*(42042*b2**2*(7 + 3*be)*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(-1 + 3*u12**2) - 
           182*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12)*
            (-924*(7 + 3*be)*g2*k1*(1 - 4*u12**2 + 3*u12**4) + 
              66*b1*(7*k2*u12*(-2*be + (21 + be*(20 + 3*be))*u12**2 + 2*be**2*u12**4) + 
                 k1*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 + 
                    2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6)) + 
              7*b1**2*(k1*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 
                    36*be*(33 + be*(22 + 5*be))*u12**4) + 
                 2*k2*u12*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) + 
                    5*be**3*(3 + u12**2)*(1 + 6*u12**2)))) + 
           k2**4*(168168*(7 + 3*be)*g2**2*k1**2*(-1 + u12**2)**2*(-1 + 3*u12**2) - 
              24024*b1*g2*k1*(-1 + u12**2)*
               (7*k2*u12*(-2*be + (21 + be*(20 + 3*be))*u12**2 + 2*be**2*u12**4) + 
                 k1*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 + 
                    2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6)) + 
              49*b1**4*be*(4*k1**2*(-39*(-33 + be**2) + 
                    (-4719 + be*(-1287 + be*(-572 + 105*be*(1 + be))))*u12**2 + 
                    (4719 + be*(2145 + be*(2951 + 105*be*(17 + 4*be))))*u12**4 + 
                    12*be*(286 + be*(260 + 7*be*(15 + 2*be)))*u12**6) + 
                 2*k1*k2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) + 
                    13*be**2*(-31 + 747*u12**2 + 964*u12**4) + 
                    21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) + 
                    5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) + 
                 k2**2*(429*(1 + 11*u12**2) + 
                    be*(be*(572 + 15*be*(10 + be)) + 3*be*(3952 + 15*be*(98 + 13*be))*u12**2 + 
                       4*(858 + be*(2353 + 15*be*(122 + 27*be)))*u12**4 + 
                       24*be**2*(30 + 23*be)*u12**6 + 858*(1 + 15*u12**2)))) - 
              26*b1**2*(-49*k2**2*u12**2*(231*(1 + 3*u12**2) + 
                    be*(3*(55 + be*(11 + be)) + 3*(341 + be*(165 + 23*be))*u12**2 + 
                       4*be*(33 + 17*be)*u12**4)) + 
                 14*k1*k2*u12*(231*(-1 + 3*u12**2 - 30*u12**4 + 14*g2*(-1 + u12**2)) - 
                    33*be**2*(1 + 9*u12**2 + 98*u12**4 + 32*u12**6 + 42*g2*(1 + 3*u12**2 - 4*u12**4)) + 
                    33*be*(-13 + 27*u12**2 - 266*u12**4 + 126*g2*(-1 + u12**4)) + 
                    be**3*(1 + 6*u12**2)*(-3 - 69*u12**2 - 68*u12**4 + 70*g2*(-3 + 2*u12**2 + u12**4)))\
                  + k1**2*(231*(15 + 196*g2 - (71 + 588*g2)*u12**2 + 8*(20 + 49*g2)*u12**4 - 
                       300*u12**6) - 33*be**2*
                     (1 + (3 + 588*g2)*u12**2 + 84*(1 + 21*g2)*u12**4 + (652 - 2352*g2)*u12**6 + 
                       240*u12**8) + 33*be*
                     (27 - 251*u12**2 + 680*u12**4 - 2220*u12**6 + 
                       98*g2*(-1 + u12)*(1 + u12)*(-1 + u12**2 + 36*u12**4)) + 
                    be**3*(-((1 + 6*u12**2)**2*(3 + 69*u12**2 + 68*u12**4)) + 
                       490*g2*(1 - 22*u12**2 - 15*u12**4 + 36*u12**6)))) + 
              14*b1**3*(k1*k2*u12*(12012*(-5 + 12*u12**2) + 429*be*(-133 + 373*u12**2 + 432*u12**4) + 
                    429*be**2*(-9 + 161*u12**2 + 688*u12**4) + 
                    5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6) + 
                    13*be**3*(97 + 3531*u12**2 + 10252*u12**4 + 1800*u12**6)) + 
                 k1**2*(6006*(3 - 16*u12**2 + 20*u12**4) + 
                    15*be**4*(1 + 6*u12**2)*(1 + 57*u12**2 + 128*u12**4 + 24*u12**6) + 
                    429*be*(-9 - 61*u12**2 + 46*u12**4 + 360*u12**6) + 
                    429*be**2*(-1 - 21*u12**2 + 34*u12**4 + 408*u12**6) + 
                    13*be**3*(21 - 131*u12**2 + 2214*u12**4 + 5016*u12**6 + 720*u12**8)) + 
                 14*k2**2*u12**2*(3003 + be*
                     (1287*(5 + 3*u12**2) + 
                       be*(429*(11 + 19*u12**2) + 
                          5*be*(273 + 30*be + (1027 + 185*be)*u12**2 + 4*(39 + 25*be)*u12**4))))))))/
       (1.765764e6*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((5*(357357*b2**2*(21 + be*(22 + 9*be))*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(-1 + 3*u12**2) - 
           238*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12)*
            (-6006*(21 + be*(22 + 9*be))*g2*k1*(1 - 4*u12**2 + 3*u12**4) + 
              7*b1**2*be*((4719 + be*(429 - 5*be*(39 + 29*be)))*k1 - 
                 3*(715 + be*(1287 + be*(533 + 25*be)))*k2*u12 + 
                 3*(-6149 + be*(-2717 + be*(-403 + 245*be)))*k1*u12**2 + 
                 (11583 + be*(27027 + be*(16809 + 2885*be)))*k2*u12**3 + 
                 18*(1287 + be*(1716 + be*(1183 + 290*be)))*k1*u12**4 + 
                 120*be**2*(39 + 25*be)*k2*u12**5) + 
              39*b1*(k1*(693 + 605*be + 275*be**2 - 5*be**3 + 
                    (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 + 
                    2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6)\
                  + 7*k2*u12*(231*(-1 + 3*u12**2) + 
                    be*(363*(-1 + 3*u12**2) + 
                       be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4))))) + 
           k2**4*(1429428*(21 + be*(22 + 9*be))*g2**2*k1**2*(-1 + u12**2)**2*(-1 + 3*u12**2) + 
              49*b1**4*be**2*(k1**2*(-3*(21879 - 374*be**2 + 63*be**4) + 
                    7*(36465 + be*(-2652 + be*(-5882 + 15*be*(-68 + 31*be))))*u12**2 + 
                    28*(-14586 + be*(-3315 + be*(3944 + 15*be*(323 + 100*be))))*u12**4 + 
                    48*(7293 + be*(11713 + be*(10880 + 7*be*(663 + 101*be))))*u12**6) + 
                 2*k1*k2*u12*(7293*(1 - 7*u12**2 + 24*u12**4) + 2652*be*(2 - 21*u12**2 + 189*u12**4) + 
                    21*be**4*(5 + 805*u12**2 + 2224*u12**4 + 728*u12**6) + 
                    68*be**3*(-30 + 1105*u12**2 + 3137*u12**4 + 954*u12**6) + 
                    34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6)) + 
                 k2**2*(7293*(-1 + 7*u12**2 + 12*u12**4) + 2652*be*(-5 + 39*u12**2 + 136*u12**4) + 
                    204*be**3*(-5 + 135*u12**2 + 1040*u12**4 + 552*u12**6) + 
                    34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6) + 
                    9*be**4*(-5 + 435*u12**2 + 3940*u12**4 + 3960*u12**6 + 448*u12**8))) + 
              238*b1**3*be*(k1**2*(3*(-4719 + be*(858 + be*(260 + (134 - 5*be)*be))) + 
                    (102531 + be*(37752 + be*(858 + be*(-3232 + 315*be))))*u12**2 + 
                    6*(-42328 + be*(-40183 + be*(-12597 + be*(863 + 925*be))))*u12**4 + 
                    12*(19305 + be*(34749 + be*(24687 + be*(9821 + 1698*be))))*u12**6 + 
                    144*be**2*(390 + be*(295 + 69*be))*u12**8) + 
                 7*k2**2*u12**2*(429*(-5 + 27*u12**2) + 
                    be*(3*(6 + be)*(-286 + 5*(-26 + be)*be) + 
                       (36036 + be*(33618 + 5*be*(2308 + 323*be)))*u12**2 + 
                       8*be*(1170 + be*(1500 + 379*be))*u12**4 + 504*be**3*u12**6)) + 
                 2*k1*k2*u12*(39*be**2*(-1 + 15*u12**2)*(-41 + 431*u12**2 + 120*u12**4) + 
                    429*be*(47 - 320*u12**2 + 777*u12**4) + 
                    7*be**3*(-89 + 528*u12**2 + 13261*u12**4 + 9540*u12**6) + 
                    be**4*(-45 + 2270*u12**2 + 17281*u12**4 + 15144*u12**6 + 1512*u12**8) + 
                    858*(23 + 54*u12**2*(-2 + 3*u12**2)))) - 
              18564*b1*g2*k1*(-1 + u12**2)*
               (k1*(693 + 605*be + 275*be**2 - 5*be**3 + 
                    (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 + 
                    2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6)\
                  + 7*k2*u12*(231*(-1 + 3*u12**2) + 
                    be*(363*(-1 + 3*u12**2) + 
                       be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4)))) + 
              17*b1**2*(49*k2**2*u12**2*(9009*(-1 + 3*u12**2) + 18876*be*(-1 + 3*u12**2) + 
                    858*be**2*(-11 + 41*u12**2 + 24*u12**4) + 156*be**3*(-5 + 39*u12**2 + 136*u12**4) + 
                    be**4*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6)) + 
                 14*k1*k2*u12*(9009*(3 - 19*u12**2 + 30*u12**4) - 
                    858*be*(-44 + 35*g2 + 2*(165 - 112*g2)*u12**2 + 27*(-22 + 7*g2)*u12**4) - 
                    858*be**2*(-11 + 63*g2 + 3*(43 - 168*g2)*u12**2 + (-304 + 441*g2)*u12**4 - 
                       192*u12**6) - 546*be**3*
                     (41*g2 + 2*(5 - 236*g2)*u12**2 + (-78 + 311*g2)*u12**4 + 8*(-34 + 15*g2)*u12**6) + 
                    be**4*(-70*g2*(15 - 592*u12**2 - 23*u12**4 + 600*u12**6) + 
                       (1 + 6*u12**2)*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6))) + 
                 k1**2*(9009*(3 - 10*u12**2)**2*(-1 + 3*u12**2) - 
                    1716*be*(33 - 539*g2 + (-473 + 2646*g2)*u12**2 + 7*(286 - 679*g2)*u12**4 + 
                       6*(-440 + 441*g2)*u12**6) - 
                    858*be**2*(39 - 98*g2 + 5*(-65 + 392*g2)*u12**2 + 2*(782 - 4459*g2)*u12**4 + 
                       36*(-69 + 196*g2)*u12**6 - 1440*u12**8) - 
                    156*be**3*(-5 + 49*u12**2 + 298*u12**4 - 2144*u12**6 - 6528*u12**8 + 
                       49*g2*(5 + 26*u12**2 - 577*u12**4 + 546*u12**6)) + 
                    be**4*(-980*g2*(-1 + u12)*(1 + u12)*(-29 + 147*u12**2 + 1044*u12**4) + 
                       (1 + 6*u12**2)**2*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6)))))))/
       (6.0035976e7*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
       
       
# Second Z1^2 Z2^2 term in Eq. 25
def e44o44_2(u12,k1,k2):

    if(l1==0 and l2==0):
        return((49*b1**4*be**2*k1**2*k2**2*(6*(1001 + be*(858 + be*(286 + 5*be*(26 + 5*be))))*k1*k2 + 
            (-3003 + be*(-2574 + be*(3146 + 105*be*(26 + 5*be))))*(k1**2 + k2**2)*u12 + 
            12*(-1001 + be*(429 + be*(2002 + 5*be*(221 + 45*be))))*k1*k2*u12**2 + 
            2*(6006 + be*(14157 + be*(11154 + 35*be*(143 + 30*be))))*(k1**2 + k2**2)*u12**3 + 
            8*(3003 + 2*be*(2574 + be*(1859 + 5*be*(208 + 45*be))))*k1*k2*u12**4 + 
            8*be**2*(572 + 35*be*(13 + 3*be))*(k1**2 + k2**2)*u12**5 + 
            32*be**2*(143 + 5*be*(13 + 3*be))*k1*k2*u12**6) + 
         182*b1**3*be*k1**2*k2**2*((3465 + be*(1848 + be*(-396 + be*(-44 + 15*be))))*k1*k2 + 
            (-5775 + be*(-6006 + be*(-1089 + 308*be + 90*be**2)))*(k1**2 + k2**2)*u12 + 
            3*(-3465 + be*(1232 + be*(4620 + be*(1716 + 265*be))))*k1*k2*u12**2 + 
            (13860 + be*(25410 + be*(15939 + be*(5544 + 955*be))))*(k1**2 + k2**2)*u12**3 + 
            4*(5775 + be*(8316 + be*(5445 + 3234*be + 650*be**2)))*k1*k2*u12**4 + 
            4*be**2*(1485 + 4*be*(308 + 65*be))*(k1**2 + k2**2)*u12**5 + 
            8*be**2*(792 + 5*be*(88 + 25*be))*k1*k2*u12**6 + 120*be**4*(k1**2 + k2**2)*u12**7) + 
         147147*k1*k2*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2))*
          (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2))*
          (15 + be*(10 + be + 2*be*u12**2)) - 
         3003*b1*(2*g2*k1**2*k2**2*(-1 + u12**2)*
             (2*(-315 + be*(-175 + be*(7 + 3*be)))*k1*k2 + 
               7*(105 + be*(105 + be*(35 + 3*be)))*(k1**2 + k2**2)*u12 + 
               20*(105 + be*(91 + 3*be*(7 + be)))*k1*k2*u12**2 + 
               28*be**2*(7 + 3*be)*(k1**2 + k2**2)*u12**3 + 16*be**2*(28 + 9*be)*k1*k2*u12**4) + 
            b2*(k1**2 + k2**2 + 2*k1*k2*u12)*
             ((-315 + be*(-175 + be*(7 + 3*be)))*k1*k2*(k1**2 + k2**2) + 
               7*(105 + be*(105 + be*(35 + 3*be)))*(k1**4 + k2**4)*u12 + 
               10*(105 + be*(91 + 3*be*(7 + be)))*k1*k2*(k1**2 + k2**2)*u12**2 + 
               28*be**2*(7 + 3*be)*(k1**4 + k2**4)*u12**3 + 
               8*be**2*(28 + 9*be)*k1*k2*(k1**2 + k2**2)*u12**4)) - 
         143*b1**2*(49*b2*be*(k1**2 + k2**2 + 2*k1*k2*u12)*
             (3*(-35 + be*(-21 + be*(3 + be)))*k1*k2*(k1**2 + k2**2) + 
               3*(1 + be)*(35 + be*(28 + 5*be))*(k1**4 + k2**4)*u12 + 
               6*(35 + be*(42 + be*(15 + 4*be)))*k1*k2*(k1**2 + k2**2)*u12**2 + 
               4*be**2*(9 + 5*be)*(k1**4 + k2**4)*u12**3 + 
               4*be**2*(9 + 2*be)*k1*k2*(k1**2 + k2**2)*u12**4) + 
            k1**2*k2**2*(-3*(945 + be*(420 - 98*be - 12*be**2 + be**3 + 
                     196*(-35 + be*(-21 + be*(3 + be)))*g2))*k1*k2 - 
               21*(-315 + be*(-280 - 70*be + be**3 + 14*(1 + be)*(35 + be*(28 + 5*be))*g2))*
                (k1**2 + k2**2)*u12 - 3*(-1155 + 
                  be*(420*(5 + 49*g2) + be*
                      (2702 + 564*be + 69*be**2 + 196*(105 + be*(27 + 7*be))*g2)))*k1*k2*u12**2 - 
               98*(225 + 3*be*(90 + be*(36 + be*(6 + be))) + 
                  be*(-105 + be*(-189 + be*(-63 + 5*be)))*g2)*(k1**2 + k2**2)*u12**3 + 
               4*(-7875 + be*(-8400 - be*(4620 + be*(2268 + 395*be)) + 
                     98*(105 + be*(126 + be*(27 + 8*be)))*g2))*k1*k2*u12**4 + 
               56*be**2*(-168 + be*(-126 - 19*be + 7*(9 + 5*be)*g2))*(k1**2 + k2**2)*u12**5 + 
               8*be**2*(-1344 + be*(-864 - 169*be + 98*(9 + 2*be)*g2))*k1*k2*u12**6 - 
               336*be**4*(k1**2 + k2**2)*u12**7 - 288*be**4*k1*k2*u12**8)))/
       (8.82882e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

    if(l1==0 and l2==2):
        return((be*(21021*k1*k2*(7 + be + (21 + 11*be)*u12**2)*
            (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2))*
            (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) - 
           3003*b1*(b2*(k1**2 + k2**2 + 2*k1*k2*u12)*
               (7*k2**4*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
                 k1*k2**3*(-7 + 10*be + be**2 + (91 + 3*be*(22 + 5*be))*u12**2 + 
                    2*(105 + be*(88 + 27*be))*u12**4) + 
                 14*k1**4*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) + 
                 2*k1**3*k2*(-2*(7 + 2*be) + (-7 + 3*(-4 + be)*be)*u12**2 + 
                    2*(3 + 2*be)*(28 + 5*be)*u12**4 + 12*be**2*u12**6)) + 
              2*g2*k1**2*k2**2*(-1 + u12**2)*
               (7*k2**2*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
                 14*k1**2*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) + 
                 k1*k2*(-35 + 2*be + be**2 + 7*(11 + 3*be*(2 + be))*u12**2 + 
                    2*(273 + be*(230 + 47*be))*u12**4 + 24*be**2*u12**6))) + 
           7*b1**3*k1**2*k2**2*(k2**2*u12*
               (3003*(1 + 27*u12**2) + 429*be*(-43 + 445*u12**2 + 270*u12**4) + 
                 429*be**2*(-35 + 423*u12**2 + 452*u12**4) + 
                 20*be**4*(36 + 655*u12**2 + 1214*u12**4 + 300*u12**6) + 
                 13*be**3*(127 + 5331*u12**2 + 9502*u12**4 + 720*u12**6)) + 
              k1**2*u12*(12012*(-5 + 12*u12**2) + 429*be*(-133 + 373*u12**2 + 432*u12**4) + 
                 429*be**2*(-9 + 161*u12**2 + 688*u12**4) + 
                 5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6) + 
                 13*be**3*(97 + 3531*u12**2 + 10252*u12**4 + 1800*u12**6)) + 
              k1*k2*(3003*(3 + 3*u12**2 + 50*u12**4) + 
                 858*be*(1 + 2*u12**2)*(8 + 99*u12**2 + 117*u12**4) + 
                 1716*be**2*(-1 + 62*u12**2 + 213*u12**4 + 146*u12**6) + 
                 26*be**3*(-8 + 1461*u12**2 + 8697*u12**4 + 5170*u12**6 + 360*u12**8) + 
                 5*be**4*(15 + 1371*u12**2 + 8558*u12**4 + 7264*u12**6 + 432*u12**8))) + 
           49*b1**4*be*k1**2*k2**2*(2*k1*k2*
               (429 + 3*be*(143 + be*(52 + 5*be*(5 + be))) + 
                 3*(-286 + be*(1001 + be*(1703 + 5*be*(187 + 39*be))))*u12**2 + 
                 (5577 + be*(10296 + be*(12259 + 20*be*(368 + 81*be))))*u12**4 + 
                 4*be*(858 + be*(1079 + 2*be*(295 + 69*be)))*u12**6) + 
              k1**2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) + 
                 13*be**2*(-31 + 747*u12**2 + 964*u12**4) + 
                 21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) + 
                 5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) + 
              k2**2*u12*(429*(-1 + 13*u12**2) + 
                 be*(7*be*(221 + 15*be*(11 + 2*be)) + be*(14001 + 35*be*(199 + 42*be))*u12**2 + 
                    4*(858 + be*(1573 + 7*be*(160 + 39*be)))*u12**4 + 429*(1 + 31*u12**2)))) - 
           13*b1**2*(49*b2*(k1**2 + k2**2 + 2*k1*k2*u12)*
               (k1**3*k2*(3*(77 + be*(66 + be*(11 + 2*be))) + 
                    3*(77 + be*(132 + be*(165 + 46*be)))*u12**2 + 
                    2*be*(297 + be*(231 + 68*be))*u12**4) + 
                 2*k1*k2**3*(3*(-77 - 66*be + be**3) + 3*(154 + be*(165 + be*(66 + 23*be)))*u12**2 + 
                    be*(297 + be*(297 + 68*be))*u12**4) + 
                 2*k1**4*u12*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) + 
                    5*be**3*(3 + u12**2)*(1 + 6*u12**2)) + 
                 k2**4*u12*(462 + 297*be*(3 + u12**2) + 66*be**2*(8 + 7*u12**2) + 
                    5*be**3*(15 + 41*u12**2))) + 
              2*k1**2*k2**2*(7*k1**2*u12*(231*(-1 + 3*u12**2 - 30*u12**4 + 14*g2*(-1 + u12**2)) - 
                    33*be**2*(1 + 9*u12**2 + 98*u12**4 + 32*u12**6 + 42*g2*(1 + 3*u12**2 - 4*u12**4)) + 
                    33*be*(-13 + 27*u12**2 - 266*u12**4 + 126*g2*(-1 + u12**4)) + 
                    be**3*(1 + 6*u12**2)*(-3 - 69*u12**2 - 68*u12**4 + 70*g2*(-3 + 2*u12**2 + u12**4)))\
                  - 7*k2**2*u12*(231*(-5 + 9*u12**2 + 24*u12**4 - 14*g2*(-1 + u12**2)) + 
                    be**3*(3 + 87*u12**2 + 482*u12**4 + 408*u12**6 + 
                       35*g2*(15 + 26*u12**2 - 41*u12**4)) - 
                    33*be*(23 - 5*u12**2*(9 + 46*u12**2) + 63*g2*(-3 + 2*u12**2 + u12**4)) - 
                    33*be**2*(1 - 5*u12**2 - 8*u12**4*(14 + 3*u12**2) + 14*g2*(-8 + u12**2 + 7*u12**4)))\
                  + k1*k2*(231*(-3 + 49*g2 - 6*(4 + 49*g2)*u12**2 + 5*(-25 + 49*g2)*u12**4 - 
                       240*u12**6) + be**3*(3 + 69*u12**2 + 68*u12**4)*
                     (-1 - 61*u12**2 - 36*u12**4 + 196*g2*(-1 + u12**2)) + 
                    33*be**2*(49*g2*(-1 + u12)*(1 + u12)*(1 + 27*u12**2 + 32*u12**4) - 
                       (1 + 15*u12**2 + 4*u12**4)*(-1 + 51*u12**2 + 48*u12**4)) + 
                    33*be*(7 - 184*u12**2 - 1403*u12**4 - 1948*u12**6 + 
                       294*g2*(1 - 8*u12**2 + u12**4 + 6*u12**6)))))))/
       (1.765764e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((5*(49*b1**4*be**2*k1**2*k2**2*(-6*(2431 + be*(2210 + be*(374 + 5*be*(34 + 3*be))))*k1*k2 + 
              (7293 + be*(5304 + be*(-7174 + 15*be*(-136 + 7*be))))*(k1**2 + k2**2)*u12 + 
              6*(26741 + be*(28288 + be*(7514 + 5*be*(952 + 261*be))))*k1*k2*u12**2 + 
              (-51051 + be*(-55692 + be*(77418 + 5*be*(15028 + 3381*be))))*(k1**2 + k2**2)*u12**3 + 
              4*(-58344 + be*(5967 + be*(130016 + 5*be*(16099 + 3546*be))))*k1*k2*u12**4 + 
              4*(43758 + be*(125307 + be*(112234 + be*(53329 + 11676*be))))*(k1**2 + k2**2)*u12**5 + 
              16*(21879 + be*(45084 + be*(34306 + be*(19924 + 4455*be))))*k1*k2*u12**6 + 
              24*be**2*(3060 + be*(2703 + 637*be))*(k1**2 + k2**2)*u12**7 + 
              288*be**2*(255 + 7*be*(17 + 4*be))*k1*k2*u12**8) + 
           238*b1**3*be*k1**2*k2**2*(-((14157 + be*(11154 + be*(-780 + be*(46 + 15*be))))*k1*k2) - 
              (-19734 + be*(-20163 + be*(-1599 + be*(623 + 45*be))))*(k1**2 + k2**2)*u12 + 
              12*(7293 + be*(4147 + be*(-2626 + be*(-419 + 35*be))))*k1*k2*u12**2 + 
              2*(-46332 + be*(-68640 + be*(-20397 + be*(1848 + 1135*be))))*(k1**2 + k2**2)*u12**3 + 
              (-172887 + be*(-43758 + be*(198432 + be*(91014 + 16855*be))))*k1*k2*u12**4 + 
              (138996 + be*(333333 + be*(247455 + be*(92827 + 17281*be))))*(k1**2 + k2**2)*u12**5 + 
              20*(11583 + be*(21879 + be*(15717 + be*(9631 + 2080*be))))*k1*k2*u12**6 + 
              12*be**2*(5850 + be*(5565 + 1262*be))*(k1**2 + k2**2)*u12**7 + 
              72*be**2*(1040 + be*(650 + 187*be))*k1*k2*u12**8 + 1512*be**4*(k1**2 + k2**2)*u12**9) + 
           357357*k1*k2*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2))*
            (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2))*
            (-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4)) - 
           4641*b1*(2*g2*k1**2*k2**2*(-1 + u12**2)*
               (-2*(-693 + be*(-605 + be*(77 + 5*be)))*k1*k2 - 
                 7*(231 + be*(363 + be*(121 + 5*be)))*(k1**2 + k2**2)*u12 + 
                 2*(-4389 + be*(-4961 - 627*be + 9*be**2))*k1*k2*u12**2 + 
                 7*(693 + be*(1089 + be*(451 + 39*be)))*(k1**2 + k2**2)*u12**3 + 
                 4*(3465 + be*(4719 + 5*be*(275 + 37*be)))*k1*k2*u12**4 + 
                 56*be**2*(33 + 17*be)*(k1**2 + k2**2)*u12**5 + 96*be**2*(44 + 17*be)*k1*k2*u12**6) + 
              b2*(k1**2 + k2**2 + 2*k1*k2*u12)*
               (-((-693 + be*(-605 + be*(77 + 5*be)))*k1*k2*(k1**2 + k2**2)) - 
                 7*(231 + be*(363 + be*(121 + 5*be)))*(k1**4 + k2**4)*u12 + 
                 (-4389 + be*(-4961 - 627*be + 9*be**2))*k1*k2*(k1**2 + k2**2)*u12**2 + 
                 7*(693 + be*(1089 + be*(451 + 39*be)))*(k1**4 + k2**4)*u12**3 + 
                 2*(3465 + be*(4719 + 5*be*(275 + 37*be)))*k1*k2*(k1**2 + k2**2)*u12**4 + 
                 56*be**2*(33 + 17*be)*(k1**4 + k2**4)*u12**5 + 
                 48*be**2*(44 + 17*be)*k1*k2*(k1**2 + k2**2)*u12**6)) - 
           17*b1**2*(49*b2*be*(k1**2 + k2**2 + 2*k1*k2*u12)*
               (-3*(-1573 + be*(-1287 + be*(65 + 11*be)))*k1*k2*(k1**2 + k2**2) - 
                 3*(715 + be*(1287 + be*(533 + 25*be)))*(k1**4 + k2**4)*u12 + 
                 3*(-6149 + be*(-5577 + be*(429 + 257*be)))*k1*k2*(k1**2 + k2**2)*u12**2 + 
                 (11583 + be*(27027 + be*(16809 + 2885*be)))*(k1**4 + k2**4)*u12**3 + 
                 2*(11583 + be*(18018 + be*(7059 + 1996*be)))*k1*k2*(k1**2 + k2**2)*u12**4 + 
                 120*be**2*(39 + 25*be)*(k1**4 + k2**4)*u12**5 + 
                 360*be**2*(13 + 3*be)*k1*k2*(k1**2 + k2**2)*u12**6) + 
              k1**2*k2**2*(3*(27027 + be*
                     (-6292*(-3 + 49*g2) + 
                       be*(-286*(25 + 882*g2) + be*(-260 + 11*be + 196*(65 + 11*be)*g2))))*k1*k2 + 
                 21*(-9009 + 11*be*(-1144 - 286*be + be**3) + 
                    14*be*(715 + be*(1287 + be*(533 + 25*be)))*g2)*(k1**2 + k2**2)*u12 - 
                 6*(57057 + be*(-18876 - be*(71786 + 3*be*(2548 + 69*be)) + 
                       196*(-3861 + be*(-3432 + be*(247 + 134*be)))*g2))*k1*k2*u12**2 - 
                 7*(-171171 + 3*be*(-94380 + be*(-36894 + be*(-1820 + 191*be))) + 
                    112*be*(1716 + be*(3861 + be*(2301 + 370*be)))*g2)*(k1**2 + k2**2)*u12**3 - 
                 (-1198197 + be*(12012*(-55 + 679*g2) + 
                       be*(793650 + 251628*be + 49835*be**2 + 196*(52767 + be*(12831 + 3221*be))*g2))
                    )*k1*k2*u12**4 - 14*(135135 + 273*be**3*(78 - 311*g2) - 11583*be*(-22 + 7*g2) - 
                    429*be**2*(-304 + 441*g2) + be**4*(4309 + 805*g2))*(k1**2 + k2**2)*u12**5 + 
                 4*(-675675 + be*(-1132560 - be*(709566 + be*(343512 + 68087*be)) + 
                       1274*(891 + be*(1386 + be*(363 + 112*be)))*g2))*k1*k2*u12**6 + 
                 168*be**2*(-6864 + 7*be*(-884 + 390*g2 + be*(-149 + 250*g2)))*(k1**2 + k2**2)*
                  u12**7 + 72*be**2*(-18304 + be*(-14144 - 2911*be + 980*(13 + 3*be)*g2))*k1*k2*
                  u12**8 - 45360*be**4*(k1**2 + k2**2)*u12**9 - 38880*be**4*k1*k2*u12**10))))/
       (6.0035976e7*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
# Z3 term in Eq. 25
def ez3(k1,k2):
    if(l1==0 and l2==0):
        if(k1!=k2):
            return(-(4*k1*k2*(1155*b1*be**4*k1**14 + 
                 70*be**2*(b1*(2310 + be*(1584 + 253*be + 9*b1*(198 + be*(132 + 25*be)))) + 
                    693*(7 + 3*be)*g21)*k1**12*k2**2 + 
                 7*(b1*(242550 + 1540*be*(180 + 77*be) + 33*be**3*(760 + 111*be) + 
                       60*b1*be*(3465 + 2*be*(2772 + be*(1683 + 2*be*(297 + 50*be))))) - 
                    2310*(-315 + be*(-315 - 70*be + 6*be**2))*g21)*k1**10*k2**4 - 
                 2*(21*b1**2*be*(92400 + be*(120120 + be*(62766 + be*(18964 + 2675*be)))) + 
                    11*b1*(183750 + be*(191100 + be*(88200 + be*(22092 + 2845*be)))) + 
                    231*(980*b3*(3 + be)*(15 + be*(10 + 3*be)) + 
                       144*b2*(2975 + be*(2975 + be*(1281 + 209*be))) + 
                       1617*(5 + be)*(5 + be*(4 + be))*g21 - 224*(525 + be*(525 + be*(203 + 27*be)))*g2x
                       ))*k1**8*k2**6 + (b1*(6387150 + 
                       be*(1848*b1**2*be*(35 + 3*be*(14 + 5*be))**2 + 
                          11*(882000 + be*(727356 + be*(297024 + 50797*be))) + 
                          12*b1*(256025 + be*(970200 + be*(1086393 + 501886*be + 89370*be**2))))) - 
                    747054*(5 + be)*(5 + be*(4 + be))*g21)*k1**6*k2**8 - 
                 14*(b1*(34650 + be*(69300 + 
                          be*(51590 + 33*be*(340 + 11*be) + 
                             15*b1*(5544 + be*(6732 + be*(2024 + 133*be)))))) + 
                    1155*(-315 + be*(-315 - 70*be + 6*be**2))*g21)*k1**4*k2**10 - 
                 35*be**2*(b1*(3696 + be*(3960 + 913*be + 12*b1*(297 + 2*be*(231 + 65*be)))) - 
                    1386*(7 + 3*be)*g21)*k1**2*k2**12 - 210*b1*be**4*(11 + 15*b1*be)*k2**14) + 
              105*(k1 - k2)**3*(k1 + k2)**3*(11*b1*be**4*k1**10 + 
                 2*be**2*(b1*(770 + 66*(8 + 9*b1)*be + 99*(1 + 4*b1)*be**2 + 75*b1*be**3) + 
                    231*(7 + 3*be)*g21)*k1**8*k2**2 + 
                 2*(b1*(8085 + 2*be*(4620 + 3465*b1 + 11*be*(273 + 17*be*(6 + be)) + 
                          6*b1*be*(924 + be*(693 + 286*be + 50*be**2)))) + 
                    693*(35 + be*(35 + 2*be*(7 + be)))*g21)*k1**6*k2**4 + 
                 2*(2*b1*(1155 + be*(2310 + be*
                           (2541 + 22*be*(57 + 11*be) + 6*b1*(462 + be*(693 + be*(374 + 75*be)))))) - 
                    693*(35 + be*(35 + 2*be*(7 + be)))*g21)*k1**4*k2**6 + 
                 be**2*(b1*(1232 + 3*be*(440 + 121*be + 4*b1*(99 + 2*be*(77 + 25*be)))) - 
                    462*(7 + 3*be)*g21)*k1**2*k2**8 + 2*b1*be**4*(11 + 15*b1*be)*k2**10)*
               (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(4.07484e7*b1**3*k1**9*k2**7))
        else:
            return(-(42*b1**3*be**2*(35 + 3*be*(14 + 5*be))**2 + 
              12*b1**2*be*(1225 + 3*be*(4900 + be*(6566 + 3276*be + 615*be**2))) + 
              2*b1*(40425 + be*(73500 + be*(70462 + 9*be*(3500 + 633*be)))) - 
              42*(36*b2*(2975 + be*(2975 + be*(1281 + 209*be))) + 
                 7*(35*b3*(3 + be)*(15 + be*(10 + 3*be)) + 
                    4*(525 + be*(525 + be*(203 + 27*be)))*(g21 - 2*g2x))))/(231525.*b1**3))
                    
    if(l1==0 and l2==2):
        if(k1!=k2):
            return(-(be*(4*k1*k2*(105*be**2*(2*b1*(715 + be*(221 + 45*b1*(13 + 3*be))) + 3003*g21)*k1**14 + 
                   35*(2*b1*(63063 + be*(74217 + 377*be*(77 + 13*be) + 
                            9*b1*(7722 + be*(11154 + be*(4979 + 905*be))))) + 
                      3003*(126 + be*(120 + 19*be))*g21)*k1**12*k2**2 + 
                   7*(26*b1*(4620 + be*(3080 + 9*be*(825 + 179*be))) + 
                      30*b1**2*(72072 + be*(95238 + be*(52338 + be*(23829 + 4547*be)))) - 
                      3003*(1050 + be*(1240 + 207*be))*g21)*k1**10*k2**4 - 
                   13*(b1*(918456 + 4*be*(209286 + be*(121132 + 20645*be))) + 
                      6*b1**2*(517440 + be*(809886 + be*(499422 + be*(191267 + 30145*be)))) + 
                      33*(1152*b2*(1519 + be*(1050 + 307*be)) + 
                         7*(1568*b3*(15 + be*(10 + 3*be)) + (6468 + 1049*be**2)*g21 - 
                            256*(147 + be*(70 + 27*be))*g2x)))*k1**8*k2**6 + 
                   (96096*b1**3*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) + 
                      26*b1*(3172554 + be*(3883110 + be*(1842643 + 346949*be))) + 
                      6*b1**2*(5325320 + be*(23621598 + be*(30019990 + be*(15187159 + 2925165*be)))) - 
                      3003*(6468 + 1049*be**2)*g21)*k1**6*k2**8 - 
                   7*(2*b1*(615615 + be*(545545 + 1677*(33 - 7*be)*be + 
                            15*b1*(66924 + be*(77220 + be*(17875 + 53*be))))) + 
                      3003*(1050 + be*(1240 + 207*be))*g21)*k1**4*k2**10 - 
                   35*(2*b1*(18018 + be*(45474 + 
                            be*(37895 + 7813*be + 3*b1*(15444 + be*(18603 + 4585*be))))) - 
                      3003*(126 + be*(120 + 19*be))*g21)*k1**2*k2**12 - 
                   105*be**2*(2*b1*(572 + be*(442 + 15*b1*(39 + 41*be))) - 3003*g21)*k2**14) + 
                105*(k1 - k2)**3*(k1 + k2)**3*
                 (be**2*(2*b1*(715 + be*(221 + 45*b1*(13 + 3*be))) + 3003*g21)*k1**10 + 
                   (26*b1*(1617 + be*(1903 + 9*be*(99 + 19*be))) + 
                      6*b1**2*be*(7722 + be*(11154 + be*(5499 + 1025*be))) + 
                      3003*(42 + be*(40 + 9*be))*g21)*k1**8*k2**2 + 
                   2*(2*b1*(6006*(5 + 6*b1) + 429*(80 + 183*b1)*be + 715*(25 + 99*b1)*be**2 + 
                         13*(263 + 2559*b1)*be**3 + 6225*b1*be**4) + 3003*(21 + 4*be*(3 + be))*g21)*k1**6*
                    k2**4 + 2*(b1*(57057 + 13*be*(5907 + be*(3091 + 641*be)) + 
                         12*b1*be*(5577 + be*(9867 + be*(5863 + 1275*be)))) - 
                      3003*(21 + 4*be*(3 + be))*g21)*k1**4*k2**6 + 
                   (2*b1*(6006 + be*(15158 + 39*be*(363 + 97*be) + 
                            3*b1*be*(5148 + be*(6721 + 2075*be)))) - 3003*(42 + be*(40 + 9*be))*g21)*
                    k1**2*k2**8 + be**2*(2*b1*(572 + be*(442 + 15*b1*(39 + 41*be))) - 3003*g21)*k2**10)*
                 (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(2.1189168e8*b1**3*k1**9*k2**7))
        else:
            return((4*be*(-21*b1**3*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) - 
               2*b1*(7203 + be*(9289 + 9*be*(505 + 99*be))) - 
               6*b1**2*(245 + be*(3255 + be*(5089 + 57*be*(49 + 10*be)))) + 
               3*(36*b2*(1519 + be*(1050 + 307*be)) + 
                  7*(49*b3*(15 + be*(10 + 3*be)) + 4*(147 + be*(70 + 27*be))*(g21 - 2*g2x)))))/
           (46305.*b1**3))
    
    if(l1==2 and l2==2):
        if(k1!=k2):
            return(-(4*k1*k2*(14175*b1*be**4*k1**18 + 
                 210*be**2*(b1*(8580 + be*(7072 + 1358*be + 9*b1*(780 + be*(590 + 117*be)))) + 
                    546*(33 + 17*be)*g21)*k1**16*k2**2 + 
                 70*(b1*(189189 + 2*be*(169884 + be*(115401 + be*(39572 + 6943*be)) + 
                          9*b1*(11583 + be*(24453 + be*(19539 + be*(8326 + 1531*be)))))) + 
                    273*(2079 + be*(3267 + be*(1419 + 151*be)))*g21)*k1**14*k2**4 + 
                 2*(b1*(-11351340 - 540540*(33 + 25*b1)*be - 110110*(64 + 135*b1)*be**2 - 
                       266994*(2 + 5*b1)*be**3 + 9*(8957 + 248360*b1)*be**4 + 720048*b1*be**5) - 
                    1911*(31185 + be*(49005 + be*(22297 + 3213*be)))*g21)*k1**12*k2**6 - 
                 4*(3*b1**2*be*(-1789788 + be*(1183182 + be*(4574856 + be*(2502259 + 463655*be)))) + 
                    b1*(-2816814 + be*(-2510508 + be*(4578288 + be*(3456648 + 666035*be)))) + 
                    39*(8448*b2*(147 + be*(231 + be*(699 + 271*be))) + 
                       7*(9856*b3*be**2*(7 + 3*be) + 
                          3*(-41503 + be*(-65219 + 2*be*(-9053 + 213*be)))*g21 - 
                          1408*(-147 + be*(-231 + be*(-13 + 23*be)))*g2x)))*k1**10*k2**8 + 
                 2*(b1*(38804766 + be*(74522448 + 384384*b1**2*be*(1 + be)**2*(7 + 5*be)**2 + 
                          be*(92317368 + be*(53941056 + 11332691*be)) + 
                          6*b1*(9971962 + be*(27333306 + be*(31994248 + be*(17984861 + 3763132*be)))))) - 
                    1638*(-41503 + be*(-65219 + 2*be*(-9053 + 213*be)))*g21)*k1**8*k2**10 + 
                 2*(b1*(-2837835 + 2*be**2*(1494493 + 3*be*(283920 + 87719*be)) + 
                       42*b1*be*(-250965 + be*(-225225 + be*(31785 + be*(64520 + 23917*be))))) - 
                    1911*(31185 + be*(49005 + be*(22297 + 3213*be)))*g21)*k1**6*k2**12 - 
                 14*(b1*(270270 + be*(849420 + 
                          be*(969540 + 35*be*(12428 + 2395*be) + 
                             6*b1*(173745 + be*(293085 + 2*be*(76605 + 14966*be)))))) - 
                    1365*(2079 + be*(3267 + be*(1419 + 151*be)))*g21)*k1**4*k2**14 - 
                 105*be**2*(b1*(13728 + be*(17680 + 5027*be + 12*b1*(1170 + be*(2115 + 719*be)))) - 
                    1092*(33 + 17*be)*g21)*k1**2*k2**16 - 5670*b1*be**4*(5 + 7*b1*be)*k2**18) + 
              105*(k1 - k2)**3*(k1 + k2)**3*(135*b1*be**4*k1**14 + 
                 2*be**2*(b1*(8580 + be*(7072 + 1538*be + 9*b1*(780 + be*(590 + 117*be)))) + 
                    546*(33 + 17*be)*g21)*k1**12*k2**2 + 
                 (b1*(126126 + 5148*(44 + 27*b1)*be + 572*(349 + 513*b1)*be**2 + 
                       156*(580 + 1743*b1)*be**3 + 9*(1907 + 14248*b1)*be**4 + 23988*b1*be**5) + 
                    546*(693 + be*(1089 + be*(649 + 141*be)))*g21)*k1**10*k2**4 + 
                 2*(b1*(60060 + 18876*(7 + 3*b1)*be + 2574*(70 + 97*b1)*be**2 + 
                       78*(1282 + 4287*b1)*be**3 + (20299 + 180582*b1)*be**4 + 36525*b1*be**5) + 
                    819*(-77 + be*(-121 + be*(33 + 29*be)))*g21)*k1**8*k2**6 + 
                 (b1*(150150 + be*(302016 + be*(355212 + be*(209040 + 46543*be)) + 
                          12*b1*(16731 + be*(45903 + be*(55731 + be*(33323 + 7500*be)))))) - 
                    1638*(-77 + be*(-121 + be*(33 + 29*be)))*g21)*k1**6*k2**8 + 
                 2*(b1*(18018 + be*(56628 + be*
                           (82940 + 6*be*(8762 + 2159*be) + 
                             3*b1*(23166 + be*(45318 + be*(31708 + 8135*be)))))) - 
                    273*(693 + be*(1089 + be*(649 + 141*be)))*g21)*k1**4*k2**10 + 
                 be**2*(b1*(13728 + be*(17680 + 5747*be + 12*b1*(1170 + be*(2115 + 803*be)))) - 
                    1092*(33 + 17*be)*g21)*k1**2*k2**12 + 54*b1*be**4*(5 + 7*b1*be)*k2**14)*
               (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(1.69513344e8*b1**3*k1**11*k2**9))
        else:
            return((8*(-21*b1**3*be**2*(1 + be)**2*(7 + 5*be)**2 - 
               6*b1**2*be*(490 + be*(1281 + be*(1498 + be*(873 + 190*be)))) - 
               b1*(1911 + be*(3696 + be*(4402 + be*(2608 + 567*be)))) + 
               3*(98*b3*be**2*(7 + 3*be) + 12*b2*(147 + be*(231 + be*(699 + 271*be))) + 
                  7*(-147 + be*(-231 + be*(-13 + 23*be)))*(g21 - 2*g2x))))/(9261.*b1**3))
    
    